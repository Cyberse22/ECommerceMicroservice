services:
  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin@123
      POSTGRES_DB: UserDb
    ports:
      - 5432:5432
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: Admin@123
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongodb_data:/data/db

  # CartService
  cartservice:
    build:
      context: .
      dockerfile: CartService/Dockerfile
    container_name: cartservice
    ports:
      - "7004:8080"
    networks:
      - my_network
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__RedisConnection: redis:6379
    depends_on:
      - redis
    volumes:
      - ./CartService/appsettings.json:/app/appsettings.json

  # OcelotGateway
  ocelotgateway:
    build:
      context: .
      dockerfile: OcelotGateway/Dockerfile
    container_name: ocelotgateway
    ports:
      - "2001:8080"
    networks:
      - my_network
    environment:
      ASPNETCORE_ENVIRONMENT: Development

  # UserService
  userservice:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    container_name: userservice
    ports:
      - "7001:8080"
    networks:
      - my_network
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__PostgreSQlConnection: Host=postgres;Port=5432;Database=UserDb;Username=postgres;Password=Admin@123
      EF_MIGATE: true
    depends_on:
      - postgres
    volumes:
      - ./UserService/appsettings.json:/app/appsettings.json
      - ./keys:/keys
  
  # ProductService
  productservice:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    container_name: productservice
    ports:
      - "7007:8080"
    networks:
      - my_network
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      MONGO_CONNECTION_STRING: "mongodb://admin:Admin%40123@mongodb:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.3"
    depends_on:
      - mongodb

networks:
  my_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongodb_data:
    driver: local